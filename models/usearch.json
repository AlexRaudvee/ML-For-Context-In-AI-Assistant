["from __future__ import annotations\nimport json\nfrom pathlib import Path\nfrom typing import Any, Dict\nimport pandas as pd\n\n\ndef read_csv_pandas(path: str | Path) -> pd.DataFrame:\n    \"\"\"\n    Read a CSV file using pandas and return a DataFrame.\n\n    Example\n    -------\n    >>> df = read_csv_pandas(\"data.csv\")\n    >>> print(df.head())\n    \"\"\"\n    return pd.read_csv(path)\n\n\ndef write_csv_pandas(df: pd.DataFrame, path: str | Path, index: bool = False) -> None:\n    \"\"\"\n    Write a DataFrame to CSV.\n\n    Parameters\n    ----------\n    df : pd.DataFrame\n        Data to save.\n    path : str | Path\n        Destination CSV path.\n    index : bool\n        Whether to write the row index.\n\n    Example\n    -------\n    >>> write_csv_pandas(df, \"out.csv\", index=False)\n    \"\"\"\n    df.to_csv(path, index=index)\n\n\ndef load_json(path: str | Path) -> Dict[str, Any]:\n    \"\"\"\n    Load JSON from a file path.\n\n    Example\n    -------\n    >>> data = load_json(\"config.json\")\n    >>> print(data.get(\"name\"))\n    \"\"\"\n    with open(path, \"r\", encoding=\"utf-8\") as f:\n        return json.load(f)\n\n\ndef save_json(obj: Dict[str, Any], path: str | Path, indent: int = 2) -> None:\n    \"\"\"\n    Save a dictionary as JSON to disk.\n\n    Example\n    -------\n    >>> save_json({\"ok\": True}, \"out.json\", indent=2)\n    \"\"\"\n    with open(path, \"w\", encoding=\"utf-8\") as f:\n        json.dump(obj, f, indent=indent, ensure_ascii=False)\n", "from __future__ import annotations\nfrom typing import List, Optional\n\n\ndef binary_search(nums: List[int], target: int) -> int:\n    \"\"\"\n    Return the index of `target` in sorted list `nums`, or -1 if not found.\n\n    Example\n    -------\n    >>> binary_search([1, 3, 5, 7, 9], 7)\n    3\n    \"\"\"\n    lo, hi = 0, len(nums) - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if nums[mid] == target:\n            return mid\n        if nums[mid] < target:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return -1\n\n\ndef quicksort(arr: List[int]) -> List[int]:\n    \"\"\"\n    In-place quicksort (returns a new sorted list for simplicity).\n\n    Example\n    -------\n    >>> quicksort([3, 1, 4, 1, 5, 9])\n    [1, 1, 3, 4, 5, 9]\n    \"\"\"\n    if len(arr) <= 1:\n        return arr[:]\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    mid = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + mid + quicksort(right)\n\n\ndef two_sum(nums: List[int], target: int) -> Optional[tuple[int, int]]:\n    \"\"\"\n    Return indices (i, j) such that nums[i] + nums[j] == target, or None.\n\n    Example\n    -------\n    >>> two_sum([2, 7, 11, 15], 9)\n    (0, 1)\n    \"\"\"\n    seen = {}\n    for i, x in enumerate(nums):\n        comp = target - x\n        if comp in seen:\n            return (seen[comp], i)\n        seen[x] = i\n    return None\n", "from __future__ import annotations\nfrom typing import Any, Dict, Optional\nimport requests\n\n\ndef get_json(url: str, timeout: int = 20) -> Dict[str, Any]:\n    \"\"\"\n    Fetch JSON from a URL.\n\n    Example\n    -------\n    >>> data = get_json(\"https://httpbin.org/json\")\n    >>> print(list(data.keys()))\n    \"\"\"\n    resp = requests.get(url, timeout=timeout)\n    resp.raise_for_status()\n    return resp.json()\n\n\ndef post_form(url: str, data: Dict[str, Any], timeout: int = 20) -> str:\n    \"\"\"\n    POST form-encoded data and return the response text.\n\n    Example\n    -------\n    >>> html = post_form(\"https://httpbin.org/post\", {\"name\": \"alice\"})\n    \"\"\"\n    resp = requests.post(url, data=data, timeout=timeout)\n    resp.raise_for_status()\n    return resp.text\n\n\ndef download_file(url: str, dest_path: str, chunk_size: int = 8192, timeout: int = 60) -> None:\n    \"\"\"\n    Stream-download a file to disk.\n\n    Example\n    -------\n    >>> download_file(\"https://httpbin.org/image/png\", \"logo.png\")\n    \"\"\"\n    with requests.get(url, stream=True, timeout=timeout) as r:\n        r.raise_for_status()\n        with open(dest_path, \"wb\") as f:\n            for chunk in r.iter_content(chunk_size=chunk_size):\n                if chunk:\n                    f.write(chunk)\n"]